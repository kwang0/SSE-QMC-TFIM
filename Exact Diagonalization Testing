X1 = [0.0 1.0; 1.0 0.0]
Z1 = [1.0 0.0; 0.0 -1.0]
I1 = [1.0 0.0; 0.0 1.0]
ZERO = [0.0 0.0; 0.0 0.0]

L = 3
N = 8
κ = 2

I_list = Array{Any}(N)
fill!(I_list, I1)

ZERO_list = Array{Any}(N)
fill!(ZERO_list, ZERO)

M = sparse(kron(ZERO_list...))
for i in 1:N
    temp = deepcopy(I_list)
    temp[i] = Z1
    M += (-1)^i * sparse(kron(temp...))
end
M /= N

temp = deepcopy(I_list)
temp[N >> 1] = Z1
Z_half = sparse(kron(temp...))

binder = Float64[]
corr = Float64[]

θ = 0.1


for θ in 0.0:0.1:1.5
    J = zeros(Float64, N, N)
    for i in 1:N
        for j in i + 1:N
            J[i,j] = sin(θ) * (0.5/abs(i - j)^κ)
            J[j,i] = J[i,j]
        end
    end
    h = ones(Float64, N)
    h *= cos(θ)

    # J = zeros(Float64, N, N)
    # for i in 1:N
    #     coord_i = ((i - 1) % L + 1, div(i - 1, L) + 1)
    #     for j in i + 1:N
    #         coord_j = ((j - 1) % L + 1, div(j - 1, L) + 1)
    #         distance = sqrt((coord_i[1] - coord_j[1])^2 + (coord_i[2] - coord_j[2])^2)
    #         J[i,j] = sin(θ) * (0.5/distance^κ)
    #         J[j,i] = J[i,j]
    #     end
    # end
    # h = ones(Float64, N)
    # h *= cos(θ)

    H = sparse(kron(ZERO_list...))
    for i in 1:N
        temp = deepcopy(I_list)
        temp[i] = X1
        H += h[i] * sparse(kron(temp...))
        for j in i + 1:N
            temp = deepcopy(I_list)
            temp[i] = Z1
            temp[j] = Z1
            H += 2 * J[i,j] * sparse(kron(temp...))
        end
    end

    evals,evec = eigs(H, nev=1, which=:SR)

    push!(binder, 1 - ((evec' * M^4 * evec)[1])/(3 * ((evec' * M^2 * evec)[1])^2))

    # for site in ((N >> 1) + 1):N
    #     temp = deepcopy(I_list)
    #     temp[site] = Z1
    #     Z_i = sparse(kron(temp...))
    #     push!(corr, (evec' * Z_half * Z_i * evec)[1] - ((evec' * Z_half * evec)[1] * (evec' * Z_i * evec)[1]))
    # end
end
