# Stochastic Series Expansion (SSE) Quantum Monte Carlo (QMC) simulation for the
# T = 0 Transverse-Field Ising Model (TFIM)
# using JLD2, FileIO

mutable struct Vertex
    position::Int # p propagation position in imaginary time
    operator_type::Int # 0 = site, 1 = bond, 2 = state (not operator), 3 = null
    site::Int # Included to flip states
    vertices_out::Array{Vertex,1} # [left, left1, right, right1]
end

null_vertex = Vertex(0, 3, 0, Vertex[])

function initializeProbabilityTables(J::Array{Float64,2}, h::Array{Float64,1}, N::Int)
    P_c1 = Array{Float64}(N)
    P_c2 = Array{Float64}(N,N)

    M = 2 * abs.(J)
    for i in 1:N
        M[i,i] = h[i]
    end

    P = sum(M,2)
    s = 0.0
    for i in 1:N
        s += P[i]
        P_c1[i] = s
    end
    P_c1 /= s

    for i in 1:N
        s = 0.0
        for j in 1:N
            s += M[i,j]
            P_c2[i,j] = s
        end
        P_c2[i,:] /= s
    end

    return P_c1, P_c2
end

function flipCluster!(α_l::BitArray{1}, operators::Array{Tuple{Int,Int},1}, vertex::Vertex, direction::Int, legs_encountered::Set{Tuple{Int,Int}}, bonds_encountered::Set{Int}, flip::Bool)
    p = vertex.position
    if vertex.operator_type == 2
        if (direction == 3) && flip
            α_l[vertex.site] = !α_l[vertex.site]
        end
    elseif vertex.operator_type == 0
        leg = (p, direction)
        if in(leg, legs_encountered)
            return
        end
        push!(legs_encountered, leg)

        if flip
            operators[p] = (-(operators[p][1] + 1), operators[p][2])
        end
    elseif vertex.operator_type == 1
        if !in(p, bonds_encountered)
            push!(bonds_encountered, p)
            flipCluster!(α_l, operators, vertex.vertices_out[1], 3, legs_encountered, bonds_encountered, flip)
            flipCluster!(α_l, operators, vertex.vertices_out[2], 3, legs_encountered, bonds_encountered, flip)
            flipCluster!(α_l, operators, vertex.vertices_out[3], 1, legs_encountered, bonds_encountered, flip)
            flipCluster!(α_l, operators, vertex.vertices_out[4], 1, legs_encountered, bonds_encountered, flip)
        end
    end
end


# Flips the spins of clusters under the Swendsen-Wang algorithm
function updateClusters!(α_l::BitArray{1}, operators::Array{Tuple{Int,Int},1}, vertex_list::Array{Vertex,1}, leg_set::Set{Tuple{Int,Int}})
    legs_encountered = Set{Tuple{Int,Int}}()
    bonds_encountered = Set{Int}() # Set of positions of bonds encountered
    for leg in leg_set
        if !in(leg, legs_encountered)
            push!(legs_encountered, leg)

            p = leg[1]
            flip = rand(Bool)
            if flip
                operators[p] = (-(operators[p][1] + 1), operators[p][2])
            end

            direction = leg[2]
            next_vertex = vertex_list[p].vertices_out[direction]
            flipCluster!(α_l, operators, next_vertex, 4 - direction, legs_encountered, bonds_encountered, flip)
        end
    end
end

function update!(α_l::BitArray{1}, operators::Array{Tuple{Int,Int},1}, J::Array{Float64,2}, N::Int, m::Int, P_c1::Array{Float64,1}, P_c2::Array{Float64,2}, s::Int)
    α = deepcopy(α_l)

    last_vertex = Array{Vertex}(N)
    for site in 1:N
        last_vertex[site] = Vertex(0, 2, site, [null_vertex, null_vertex, null_vertex, null_vertex])
    end

    vertex_list = Array{Vertex}(2m)
    leg_set = Set{Tuple{Int,Int}}()

    magnetization = 0.0
    spin1 = 0.0
    spin2 = 0.0
    middle_state = BitArray{1}()
    n_diagonal = 0
    n_off_diagonal = 0
    n_bond = 0

    # Propagate alpha forward in imaginary time
    for p in 1:2m
        # Local/diagonal updates
        if operators[p][1] == -1
            site = operators[p][2]
            α[site] = !α[site] # flip operator
            n_off_diagonal += 1
        else
            while true
                i = searchsortedfirst(P_c1, rand())
                j = searchsortedfirst(P_c2[i,:], rand())

                if (i == j) # Adding diagonal site operator
                    # if rand(Bool)
                        operators[p] = (0, i)
                        n_diagonal += 1
                        break
                    # else
                    #     operators[p] = (-1, i)
                    #     α[i] = !α[i]
                    #     n_off_diagonal += 1
                    #     break
                    # end
                else
                    if (J[i,j] > 0) && (α[i] == !α[j]) # Antiferromagnetic bond operator
                        # if (i - j) % 2 == 1
                            # println("($i, $j)")
                            operators[p] = (i, j)
                            n_bond += 1
                            break
                        # end
                    elseif (J[i,j] < 0) && (α[i] == α[j]) # Ferromagnetic bond operator
                        operators[p] = (i, j)
                        n_bond += 1
                        break
                    end
                end
            end
        end

        # Cluster building
        if operators[p][1] <= 0 # Site operator encountered
            site = operators[p][2]
            vertex = Vertex(p, 0, site, [last_vertex[site], null_vertex, null_vertex, null_vertex])
            vertex_list[p] = vertex
            push!(leg_set, (p, 1)) # Left leg of vertex
            push!(leg_set, (p, 3)) # Right leg of vertex

            # Update previous vertex
            if last_vertex[site].vertices_out[3] == null_vertex
                last_vertex[site].vertices_out[3] = vertex
            else
                last_vertex[site].vertices_out[4] = vertex
            end
            last_vertex[site] = vertex
        else # Bond operator encountered
            site1 = operators[p][1]
            site2 = operators[p][2]
            vertex = Vertex(p, 1, 0, [last_vertex[site1], last_vertex[site2], null_vertex, null_vertex])
            vertex_list[p] = vertex

            # Update previous vertices
            p1 = last_vertex[site1].position
            p2 = last_vertex[site2].position
            if last_vertex[site1].vertices_out[3] == null_vertex
                last_vertex[site1].vertices_out[3] = vertex
            else
                last_vertex[site1].vertices_out[4] = vertex
            end
            if last_vertex[site2].vertices_out[3] == null_vertex
                last_vertex[site2].vertices_out[3] = vertex
            else
                last_vertex[site2].vertices_out[4] = vertex
            end
            last_vertex[site1] = vertex
            last_vertex[site2] = vertex
        end

        if p == m # Middle of imaginary time propagation samples ground state
            middle_state = deepcopy(α)
        end
    end

    updateClusters!(α_l, operators, vertex_list, leg_set) # Off-diagonal updates

    # Measuring <Z_(N/2) * Z_i> correlators
    if middle_state[N >> 1]
        spin1 = 1
    else
        spin1 = -1
    end
    if middle_state[s]
        spin2 = 1
    else
        spin2 = -1
    end

    # Measuring magnetization
    for site in 1:N
    	spin = 0
        if middle_state[site]
            spin = 1
        else
            spin = -1
        end

    	if site % 2 == 1 # Anti-ferromagnet
    	    spin *= -1
    	end
    	magnetization += spin
    end
    magnetization /= N

    return magnetization, middle_state, n_diagonal, n_off_diagonal, n_bond
    # return spin1, spin2
end

# function check_validity()
#     α = deepcopy(α_l)
#     for p in 1:2m
#         if operators[p][1] == -1
#             site = operators[p][2]
#             α[site] = !α[site] # flip operator
#         elseif operators[p][1] > 0
#             site1 = operators[p][1]
#             site2 = operators[p][2]
#
#             if (J[site1, site2] > 0) && (α[site1] == α[site2])
#                 α1 = α[site1]
#                 α2 = α[site2]
#                 error("($p) AF Bond ($site1, $site2) is acting on same spin ($α1, $α2)")
#             elseif (J[site1, site2] < 0) && (α[site1] != α[site2])
#                 α1 = α[site1]
#                 α2 = α[site2]
#                 error("($p) Ferro Bond ($site1, $site2) is not acting on same spin ($α1, $α2)")
#             elseif (J[site1, site2] == 0)
#                 α1 = α[site1]
#                 α2 = α[site2]
#                 error("($p) Bond ($site1, $site2) exists on non-interacting spins ($α1, $α2)")
#             end
#         end
#     end
# end

steps = 100000
delay = steps/2

N = 8
m = 200


# θ = 1.5
κ = 2





avg = Float64[]
err = Float64[]
M = 5

# println("N = $N, m = $m, θ = 0:0.1:1.5, κ = $κ, M = $M")
# for i in ((N >> 1) + 1):N
# while m < 100000
for θ in 0.0:0.1:1.5
    println("Calculating binder cumulant at θ = $θ")
    # println("Testing convergence at m = $m")
    # println("Correlator of site $N/2 with site $i")
    J = zeros(Float64, N, N)
    for i in 1:N
        for j in i + 1:N
            J[i,j] = sin(θ) * (1.0/abs(i - j)^κ)
            J[j,i] = J[i,j]
        end
    end
    h = ones(Float64, N)
    h *= cos(θ)

    P_c1, P_c2 = initializeProbabilityTables(J, h, N)

    time_series = zeros(M, steps)
    states = Array{BitArray, 2}(M, steps)
    n_operators = Array{Tuple{Int, Int, Int}, 2}(M, steps)
    temp = zeros(M,2)
    # correlators = zeros(M)
    binder_cumulant = zeros(M)
    for j in 1:M
        println("Iteration: $j")

        α_l = BitArray(rand(Bool,N))
        for i in 1:N
            α_l[i] = (i % 2 == 0)
        end
        operators = Array{Tuple{Int, Int}}(2m)
        fill!(operators, (0,1))
        tic()
        for k in 1:steps
            # spin1, spin2 = update!(α_l, operators, J, N, m, P_c1, P_c2, 501)
	        magnetization, state, n_diagonal, n_off_diagonal, n_bond = update!(α_l, operators, J, N, m, P_c1, P_c2, 1)
            time_series[j,k] = magnetization
            states[j,k] = state
            n_operators[j,k] = (n_diagonal, n_off_diagonal, n_bond)
            # check_validity()
            if (k > delay)
                # temp[j,1] += spin1 * spin2
                # temp[j,2] += spin1
                # temp[j,3] += spin2
		        temp[j,1] += magnetization^2
		        temp[j,2] += magnetization^4
            end
        end
        toc()
        temp[j,:] /= (steps - delay)
        # correlators[j] = temp[j,1] - (temp[j,2] * temp[j,3])
        # println(correlators[j])
        # println(temp[j,2])
        # println(temp[j,1])
    	binder_cumulant[j] = 1 - (temp[j,2])/(3 * (temp[j,1])^2)
    	println(binder_cumulant[j])
    	# flush(STDOUT)
    end
    push!(avg, mean(binder_cumulant))
    push!(err, std(binder_cumulant)/sqrt(M))
    println(mean(binder_cumulant))
    println(std(binder_cumulant)/sqrt(M))
    # m *= 2
    # flush(STDOUT)
end

# @save "kwang98-testing.jld2" avg
# writedlm("/lustre/kwang98/Koffel_binder_cumulant_corrected_$(N)_$(m)_0:0.1:1.5_$(κ)_$(M)_$(steps).txt", (avg,err))
